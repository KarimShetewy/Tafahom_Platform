# Generated by Django 5.2.3 on 2025-06-14 12:46

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='البريد الإلكتروني')),
                ('password', models.CharField(max_length=128, verbose_name='كلمة المرور المشفرة')),
                ('user_type', models.CharField(choices=[('student', 'طالب'), ('teacher', 'أستاذ'), ('team_member', 'عضو فريق عمل')], max_length=20, verbose_name='نوع الحساب المطلوب')),
                ('first_name', models.CharField(max_length=100, verbose_name='الاسم الأول')),
                ('last_name', models.CharField(max_length=100, verbose_name='الاسم الأخير')),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, verbose_name='رقم الهاتف')),
                ('gender', models.CharField(blank=True, choices=[('male', 'ذكر'), ('female', 'أنثى')], max_length=10, null=True, verbose_name='الجنس')),
                ('governorate', models.CharField(blank=True, choices=[('cairo', 'القاهرة'), ('alexandria', 'الإسكندرية'), ('giza', 'الجيزة'), ('qalyubia', 'القليوبية'), ('sharqia', 'الشرقية'), ('monufia', 'المنوفية'), ('beheira', 'البحيرة'), ('gharbia', 'الغربية'), ('kafr_el_sheikh', 'كفر الشيخ'), ('fayoum', 'الفيوم'), ('beni_suef', 'بني سويف'), ('minya', 'المنيا'), ('assiut', 'أسيوط'), ('sohag', 'سوهاج'), ('qena', 'قنا'), ('luxor', 'الأقصر'), ('aswan', 'أسوان'), ('red_sea', 'البحر الأحمر'), ('new_valley', 'الوادي الجديد'), ('matrouh', 'مطروح'), ('north_sinai', 'شمال سيناء'), ('south_sinai', 'جنوب سيناء'), ('suez', 'السويس'), ('ismailia', 'الإسماعيلية'), ('port_said', 'بورسعيد'), ('damietta', 'دمياط')], max_length=50, null=True, verbose_name='المحافظة')),
                ('second_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='الاسم الثاني (الأب)')),
                ('third_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='الاسم الثالث (الجد)')),
                ('parent_father_phone_number', models.CharField(blank=True, max_length=15, null=True, verbose_name='رقم هاتف الأب')),
                ('parent_mother_phone_number', models.CharField(blank=True, max_length=15, null=True, verbose_name='رقم هاتف الأم')),
                ('school_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='اسم المدرسة')),
                ('parent_profession', models.CharField(blank=True, choices=[('doctor', 'طبيب'), ('engineer', 'مهندس'), ('teacher', 'معلم'), ('accountant', 'محاسب'), ('other', 'أخرى')], max_length=50, null=True, verbose_name='مهنة ولي الأمر')),
                ('teacher_name_for_student', models.CharField(blank=True, max_length=255, null=True, verbose_name='اسم الأستاذ للطالب')),
                ('academic_level', models.CharField(blank=True, choices=[('first_secondary', 'الصف الأول الثانوي'), ('second_secondary', 'الصف الثاني الثانوي'), ('third_secondary', 'الصف الثالث الثانوي')], max_length=50, null=True, verbose_name='الصف الدراسي')),
                ('qualifications', models.TextField(blank=True, null=True, verbose_name='المؤهلات (للأستاذ)')),
                ('experience', models.TextField(blank=True, null=True, verbose_name='الخبرة (للأستاذ)')),
                ('category_type', models.CharField(blank=True, choices=[('math', 'رياضيات'), ('physics', 'فيزياء'), ('chemistry', 'كيمياء'), ('arabic', 'لغة عربية'), ('english', 'لغة إنجليزية')], max_length=50, null=True, verbose_name='الفئة المطلوبة (للأستاذ)')),
                ('what_will_you_add', models.TextField(blank=True, null=True, verbose_name='ما الذي ستضيفه لمنصة تفاهم؟ (للأستاذ/فريق العمل)')),
                ('job_position', models.CharField(blank=True, choices=[('it_specialist', 'IT Specialist'), ('developer', 'Developer'), ('videographer_editor', 'Videographer/Editor'), ('social_media_specialist', 'Social Media Specialist'), ('print_designer', 'Print Designer'), ('moderator', 'Moderator'), ('arabic_english_translator', 'مترجم عربي/إنجليزي'), ('accountant', 'محاسب'), ('story_teller', 'راوي قصص'), ('content_creator', 'صانع محتوى'), ('sales_admin_assistant', 'مساعد مبيعات/إدارة'), ('other', 'أخرى')], max_length=50, null=True, verbose_name='الوظيفة المطلوبة (لفريق العمل)')),
                ('expected_salary', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='الراتب المتوقع')),
                ('address', models.TextField(blank=True, null=True, verbose_name='العنوان بالتفصيل')),
                ('previous_work_experience', models.TextField(blank=True, null=True, verbose_name='خبرة العمل السابقة (لفريق العمل)')),
                ('instagram_link', models.URLField(blank=True, null=True, verbose_name='رابط انستجرام (اختياري)')),
                ('facebook_link', models.URLField(blank=True, null=True, verbose_name='رابط فيسبوك (اختياري)')),
                ('website_link', models.URLField(blank=True, null=True, verbose_name='رابط الموقع الإلكتروني (اختياري)')),
                ('personal_id_card', models.FileField(blank=True, null=True, upload_to='account_requests/personal_ids/', verbose_name='صورة البطاقة الشخصية')),
                ('cv_file', models.FileField(blank=True, null=True, upload_to='account_requests/cvs/', verbose_name='ملف السيرة الذاتية (CV)')),
                ('status', models.CharField(choices=[('pending', 'قيد المراجعة'), ('approved', 'مقبول'), ('rejected', 'مرفوض')], default='pending', max_length=10, verbose_name='حالة الطلب')),
                ('rejection_reason', models.TextField(blank=True, null=True, verbose_name='سبب الرفض (إن وجد)')),
                ('request_date', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الطلب')),
            ],
            options={
                'verbose_name': 'طلب إنشاء حساب',
                'verbose_name_plural': 'طلبات إنشاء الحساب',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('student', 'طالب'), ('teacher', 'أستاذ'), ('team_member', 'عضو فريق عمل')], default='student', max_length=20, verbose_name='نوع المستخدم')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='custom_user_set', related_query_name='custom_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_permissions_set', related_query_name='custom_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'مستخدم',
                'verbose_name_plural': 'مستخدمين',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
